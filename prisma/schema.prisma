generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String
  isAdmin  Boolean

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  reviews   Review[]
  orders    Order[]
}

model Product {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String
  brand        String
  category     String
  description  String
  rating       Float
  numReviews   Int
  price        Float
  countInStock Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       String      @db.ObjectId
  createdBy  User        @relation(fields: [user], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  reviews    Review[]
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  rating  Float
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

type ShippingAddress {
  address    String
  city       String
  postalCode String
  country    String
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  shippingAddress ShippingAddress
  paymentMethod   String
  paymentResult   String
  itemsPrice      Float
  taxPrice        Float
  shippingPrice   Float
  totalPrice      Float
  isPaid          Boolean         @default(false)
  paidAt          DateTime?
  deliveredAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
}

model OrderItem {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  qty   Int
  image String
  price Float

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
